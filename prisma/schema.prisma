generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String        @unique @db.VarChar(255)
  name         String        @db.VarChar(255)
  bio          String?
  addressId    String?       @db.Uuid
  logo         String?       @db.VarChar
  password     String        @db.VarChar(255)
  accessToken  String?       @db.VarChar(255)
  refreshToken String?       @db.VarChar(255)
  lastActive   DateTime?     @db.Timestamp(6)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  itemstore    itemStore[]
  transaction  transaction[]
  address      address?      @relation(fields: [addressId], references: [id])
  userAddress  userAddress[]

  @@map("store")
}

model address {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  active      Boolean?
  jalan       String?       @db.VarChar(255)
  rt          String?       @db.VarChar(255)
  rw          String?       @db.VarChar(255)
  kodepos     String?       @db.VarChar(255)
  kelurahan   String?       @db.VarChar(255)
  kecamatan   String?       @db.VarChar(255)
  kota        String?       @db.VarChar(255)
  provinsi    String?       @db.VarChar(255)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        user[]
  userAddress userAddress[]

  @@map("store_address")
}

model userAddress {
  addressId String  @db.Uuid
  userId    String  @db.Uuid
  address   address @relation(fields: [addressId], references: [id])
  user      user    @relation(fields: [userId], references: [id])

  @@id([addressId, userId])
  @@map("store_user_address")
}

model itemStore {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                 @db.VarChar(255)
  qty                  Int
  price                Int
  desc                 String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  userId               String                 @db.Uuid
  categoriesItemStore  categoriesItemStore[]
  user                 user                   @relation(fields: [userId], references: [id])
  itemStoreImages      itemStoreImages[]
  transactionItemStore transactionItemStore[]

  @@map("item_store")
}

model category {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String                @db.VarChar(255)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  categoriesItemStore categoriesItemStore[]

  @@map("category")
}

model categoriesItemStore {
  categoryId  String    @db.Uuid
  itemStoreId String    @db.Uuid
  category    category  @relation(fields: [categoryId], references: [id])
  itemStore   itemStore @relation(fields: [itemStoreId], references: [id])

  @@id([categoryId, itemStoreId])
  @@map("category_item_store")
}

model itemStoreImages {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  path        String    @db.VarChar(255)
  itemstoreId String    @db.Uuid
  itemStore   itemStore @relation(fields: [itemstoreId], references: [id], onDelete: Cascade)

  @@map("item_store_images")
}

model transaction {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customerId           String                 @db.Uuid
  invoice              Json?
  total                Int
  userId               String                 @db.Uuid
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  user                 user                   @relation(fields: [userId], references: [id])
  transactionItemStore transactionItemStore[]

  @@map("transaction")
}

model transactionItemStore {
  transactionId String      @db.Uuid
  itemStoreId   String      @db.Uuid
  qty           Int
  itemStore     itemStore   @relation(fields: [itemStoreId], references: [id])
  transaction   transaction @relation(fields: [transactionId], references: [id])

  @@id([transactionId, itemStoreId])
  @@map("transaction_item_store")
}

enum rolesUser {
  user
  super
}
